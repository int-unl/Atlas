# STEP 1 ############################################################


sudo apt install build-essential
sudo add-apt-repository ppa:ubuntu-toolchain-r/test 
sudo apt-get update 
sudo apt-get install gcc-8 g++-8 
gcc --v
g++ -v  ####### make sure they are 8.0 above
########If not, then 
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 8
sudo update-alternatives --config gcc
sudo update-alternatives --config g++
sudo apt install python3-distro
sudo apt-get install python-pygraphviz
sudo apt install castxml
pip3 install pygccxml
sudo apt-get install python-gi-cairo        


# STEP2 ############################################################


Follow the pre-requisites, e.g., packages (https://www.nsnam.org/wiki/Installation) #####Resolve unfound packages if needed




# STEP 3 ############################################################
Download NS-3-3.36 from here: https://www.nsnam.org/releases/ns-3-36/
Or: wget https://www.nsnam.org/releases/ns-allinone-3.36.1.tar.bz2
tar xjf ns-allinone-3.36.1.tar.bz2


# STEP 4 ############################################################
cd ns-allinone-3.36.1
cd ns-3.36.1 ## again
./ns3 configure
./ns3 build


./ns3 run scratch/scratch-simulator.cc  ######## you can test it with this code


######until now, you complete the basic ns3 ###################################




# STEP 5 ############################################################
########################### add edge module ################################
Put the edge/ folder into the ns3-3.36.1/contrib/
then in the main folder of ns3-3.36.1/, run 
./ns3 configure
./ns3 build


# STEP 6 (no need) ########################################################
########################### add MAX MCS function  ############################
Then, copy the two files () to src/lte/model/ (replace the original one)
/src/lte/model/pf-ff-mac-scheduler.cc
/src/lte/model/pf-ff-mac-scheduler.h




# STEP 7 ############################################################
########################### add my previous scratched codes  #####################


If correct, then replace the scratch/ folder:
 then in the main folder of ns3-3.36.1/, run 
./ns3 configure
./ns3 build


Test command: ./ns3 run scratch/main-mar.cc


# DONE ############################################################










# #####     ############################################################
# DEBUG  ############################################################
# #####    ############################################################
Install VS Code (not sure how it works in PyCharm or others)


Open the folder of ns3-3.36.1/


Press F1, select “C/C++: Edit Configuration (JSON)”


Select and open our codes, e.g., scratch/main-mar.cc
Select top menu, “Terminal” - “Configure Default Build Task”, then choose “C/C++:g++ build active file”
Then, change “"command": "/usr/bin/g++",” to “"command": "/ns3",” 


Select top menu, “Run” – “Add Configuration...” – “C++ (GBD/LLDB)” – “g++ build and debug active file”
Then, you will see an error, click “see launch.json”
Change "program": "${fileDirname}/${fileBasenameNoExtension}", to "program": "${workspaceFolder}/build/scratch/ns3.36.1-${fileBasenameNoExtension}-default,”
Change to “"cwd": "${workspaceFolder}",”
It is also recommended to add this to the environment, which then is:
"environment": [{
               "name": "LD_LIBRARY_PATH",
               "value": "${workspaceFolder}/build/lib/"
           }],


Save the lauch.json file


Next, open the main-mar.cc file, press F5 to debug, you should be good to go.
























































###################################################################################################################################################








sudo apt install python3-distro
sudo apt-get install python-pygraphviz


* Follow the pre-requisites, e.g., packages (https://www.nsnam.org/wiki/Installation)
Resolve unfound packages if needed




sudo apt install castxml
pip3 install pygccxml


bake.py configure -e ns-3-dev
sudo apt-get install python-gi-cairo  # even if we install for python3, but not for python






# then copy the whole achieve file and extract it
# then: goes to ./build.py






bake.py show
bake.py deploy
bake.py download
bake.py build
#### you will probably face error, never mind, continue with the following steps ##########




* Follow the get_started (https://www.nsnam.org/docs/tutorial/html/getting-started.html)
(########use bake to download and build is better#########3)
$ cd
$ mkdir workspace
$ cd workspace
$ git clone https://gitlab.com/nsnam/ns-3-allinone.git
$ cd ns-3-allinone
$ ./download.py # default is master of ns-3-dev
$ ./build.py


/////////////////////////////////////////
$ git clone https://gitlab.com/nsnam/ns-3-dev.git # if use non-dev, also works
$ cd ns-3-dev
$ ./ns3 clean
### here, make sure GUN version is 8.00 +, (install them accordingly, e.g., gcc, g++). if not then, change the CMake.txt about GUN requirement to 7.0.0 (seems work), 
$ ./ns3 configure --build-profile=optimized  # --enable-examples --enable-tests //--disable-examples
$ ./ns3 build
$ ./ns3 run XXXX (## how about arguments)








   * Debug with VS code (make sure it is ns-3-dev and select GCC8 + )
*Remember to have your own code in scratch/ folder.
*Even if a tutorial for setting up debugging, it actually works without changing anything, just press F5 (note to “run build task” or “run active file”)
The run part can be found in “terminal-configure default build task”
https://www.bilibili.com/video/BV1pU4y1W74Z?spm_id_from=333.999.0.0






Note that: ns-3-XXX is with ./waf, while ns-3-dev is with ./ns3 
















# use config-store to change the default parameters of NS3
https://www.nsnam.org/docs/models/html/lte-user.html#configuration-of-lte-model-parameters




$ use  ThreeGppHttpServer::ReceivedDataCallback to call back function, e.g., return result back to users


# use ns3 app store to add traffic generator and ns3-ai etc.




Rxdelay, RxRTT is in three-gpp-http-client-server-test.cc, example








































































      * sudo apt install build-essential
sudo add-apt-repository ppa:ubuntu-toolchain-r/test 
sudo apt-get update 
sudo apt-get install gcc-8 g++-8 
gcc --v
g++ -v  # make sure they are 8.0 above
If not, then 
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 8
sudo update-alternatives --config gcc
sudo update-alternatives --config g++








sudo apt install python3-distro
sudo apt-get install python-pygraphviz


      * Follow the pre-requisites, e.g., packages (https://www.nsnam.org/wiki/Installation)
Resolve unfound packages if needed




sudo apt install castxml
pip3 install pygccxml


bake.py configure -e ns-3-dev
sudo apt-get install python-gi-cairo  # even if we install for python3, but not for python






# then copy the whole achieve file and extract it
# then: goes to ./build.py






bake.py show
bake.py deploy
bake.py download
bake.py build
#### you will probably face error, never mind, continue with the following steps ##########




      * Follow the get_started (https://www.nsnam.org/docs/tutorial/html/getting-started.html)
(########use bake to download and build is better#########3)
$ cd
$ mkdir workspace
$ cd workspace
$ git clone https://gitlab.com/nsnam/ns-3-allinone.git
$ cd ns-3-allinone
$ ./download.py # default is master of ns-3-dev
$ ./build.py


/////////////////////////////////////////
$ git clone https://gitlab.com/nsnam/ns-3-dev.git # if use non-dev, also works
$ cd ns-3-dev
$ ./ns3 clean
### here, make sure GUN version is 8.00 +, (install them accordingly, e.g., gcc, g++). if not then, change the CMake.txt about GUN requirement to 7.0.0 (seems work), 
$ ./ns3 configure --build-profile=optimized  # --enable-examples --enable-tests //--disable-examples
$ ./ns3 build
$ ./ns3 run XXXX (## how about arguments)








         * Debug with VS code (make sure it is ns-3-dev and select GCC8 + )
*Remember to have your own code in scratch/ folder.
*Even if a tutorial for setting up debugging, it actually works without changing anything, just press F5 (note to “run build task” or “run active file”)
The run part can be found in “terminal-configure default build task”
https://www.bilibili.com/video/BV1pU4y1W74Z?spm_id_from=333.999.0.0






Note that: ns-3-XXX is with ./waf, while ns-3-dev is with ./ns3 
















# use config-store to change the default parameters of NS3
https://www.nsnam.org/docs/models/html/lte-user.html#configuration-of-lte-model-parameters




$ use  ThreeGppHttpServer::ReceivedDataCallback to call back function, e.g., return result back to users


# use ns3 app store to add traffic generator and ns3-ai etc.




Rxdelay, RxRTT is in three-gpp-http-client-server-test.cc, example